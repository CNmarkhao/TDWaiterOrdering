apply plugin: 'com.android.library'
apply plugin: 'com.jakewharton.butterknife'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        multiDexEnabled = true
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions{
        abortOnError false
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

dependencies {
    api rootProject.ext.dependencies["appcompatv4"]
    api rootProject.ext.dependencies["appcompatv7"]
    api rootProject.ext.dependencies["design"]
    //eventbus
    api 'org.greenrobot:eventbus:3.1.1'
    //butterknife
    api 'com.jakewharton:butterknife:10.1.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.1.0'

    //retrofit+okhttp
    api 'com.squareup.retrofit2:retrofit:2.5.0'
    api 'com.squareup.retrofit2:adapter-rxjava2:2.5.0'
    api 'com.squareup.okhttp3:okhttp:4.0.1'
    api 'com.squareup.okhttp3:logging-interceptor:3.12.1'
    api 'com.squareup.retrofit2:converter-gson:2.5.0'

    //gson
    api 'com.google.code.gson:gson:2.8.5'
    //glide
    api 'com.github.bumptech.glide:glide:4.8.0'
    //rxlifecycle
    api 'com.trello.rxlifecycle2:rxlifecycle-components:2.1.0'
}

tasks.withType(Javadoc) {//防止编码问题
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}